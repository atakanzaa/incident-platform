version: '3.8'

services:
  # Infrastructure Services
  postgresql:
    image: postgres:15-alpine
    container_name: postgresql-dev
    environment:
      POSTGRES_DB: incident_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-scripts/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    networks:
      - incident-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:6.0
    container_name: mongodb-dev
    ports:
      - "27017:27017"
    volumes:
      - mongo_data_dev:/data/db
      - ./init-scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - incident-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data_dev:/var/lib/zookeeper/data
    networks:
      - incident-network
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-dev
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    volumes:
      - kafka_data_dev:/var/lib/kafka/data
    networks:
      - incident-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
    ports:
      - "8761:8761"
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
    ports:
      - "8888:8888"
    depends_on:
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      JWT_SECRET: mySecretKey12345678901234567890
    ports:
      - "8080:8080"
    depends_on:
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      DB_HOST: postgresql
      DB_USERNAME: postgres
      DB_PASSWORD: 123456
      JWT_SECRET: mySecretKey12345678901234567890
    ports:
      - "8081:8081"
    depends_on:
      postgresql:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  log-collector-service:
    build:
      context: ./log-collector-service
      dockerfile: Dockerfile
    container_name: log-collector-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  anomaly-detector-service:
    build:
      context: ./anomaly-detector-service
      dockerfile: Dockerfile
    container_name: anomaly-detector-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  alert-manager-service:
    build:
      context: ./alert-manager-service
      dockerfile: Dockerfile
    container_name: alert-manager-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
    ports:
      - "8085:8085"
    depends_on:
      rabbitmq:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auto-responder-service:
    build:
      context: ./auto-responder-service
      dockerfile: Dockerfile
    container_name: auto-responder-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: admin123
      AUTO_RESPONSE_DRY_RUN: "true"
      K8S_ENABLED: "false"
    ports:
      - "8086:8086"
    depends_on:
      rabbitmq:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  incident-tracker:
    build:
      context: ./incident-tracker
      dockerfile: Dockerfile
    container_name: incident-tracker-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      MONGODB_HOST: mongodb
      MONGODB_DATABASE: incident_tracker
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8087:8087"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  dashboard-service:
    build:
      context: ./dashboard-service
      dockerfile: Dockerfile
    container_name: dashboard-service-dev
    environment:
      SPRING_PROFILES_ACTIVE: development
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8088:8088"
    depends_on:
      kafka:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: ai-service-dev
    environment:
      ENVIRONMENT: development
      REDIS_HOST: redis
      LOG_LEVEL: DEBUG
      API_WORKERS: 1
      ANOMALY_THRESHOLD: 0.7
      CONFIDENCE_THRESHOLD: 0.8
      AUTO_RETRAIN_ENABLED: "true"
      METRICS_ENABLED: "true"
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - incident-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services (Optional for development)
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus-dev
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_dev:/prometheus
    networks:
      - incident-network

volumes:
  postgres_data_dev:
  mongo_data_dev:
  redis_data_dev:
  kafka_data_dev:
  zookeeper_data_dev:
  rabbitmq_data_dev:
  prometheus_data_dev:

networks:
  incident-network:
    driver: bridge 